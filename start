#!/bin/bash

# Mining Manager Script
# Supports Vipor and Luckpool with Hacker UI Animation

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Animation variables
ANIMATION_SPEED=0.1
PROGRESS_BAR_WIDTH=50

# Function to display banner
show_banner() {
    clear
    echo -e "${CYAN}"
    echo " ███╗   ███╗██╗███╗   ██╗██╗███╗   ██╗ ██████╗ "
    echo " ████╗ ████║██║████╗  ██║██║████╗  ██║██╔════╝ "
    echo " ██╔████╔██║██║██╔██╗ ██║██║██╔██╗ ██║██║  ███╗"
    echo " ██║╚██╔╝██║██║██║╚██╗██║██║██║╚██╗██║██║   ██║"
    echo " ██║ ╚═╝ ██║██║██║ ╚████║██║██║ ╚████║╚██████╔╝"
    echo " ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝ "
    echo -e "${NC}"
    echo -e "${GREEN}          MINING MANAGER v2.0${NC}"
    echo -e "${YELLOW}     VIPOR & LUCKPOOL SUPPORT${NC}"
    echo "=========================================="
}

# Function to show loading animation
show_loading() {
    local text=$1
    echo -ne "${CYAN}[${text}]${NC} ${GREEN}"
    for i in {1..20}; do
        echo -n "■"
        sleep 0.1
    done
    echo -e "${NC}"
}

# Function to show progress bar
show_progress() {
    local percentage=$1
    local text=$2
    local filled=$((percentage * PROGRESS_BAR_WIDTH / 100))
    local empty=$((PROGRESS_BAR_WIDTH - filled))
    
    echo -ne "${CYAN}[${text}]${NC} ${PURPLE}[${NC}"
    for i in $(seq 1 $filled); do
        echo -ne "${GREEN}█${NC}"
    done
    for i in $(seq 1 $empty); do
        echo -ne "${RED}░${NC}"
    done
    echo -ne "${PURPLE}] ${percentage}%${NC}\r"
}

# Function to create hacker animation
hacker_animation() {
    echo -e "${GREEN}"
    echo "INITIALIZING MINING SYSTEM..."
    echo -e "${NC}"
    
    for i in {1..100}; do
        show_progress $i "SYSTEM BOOT"
        sleep 0.02
    done
    echo -e "\n"
    
    # Matrix-like animation
    echo -e "${GREEN}CONNECTING TO BLOCKCHAIN NETWORK...${NC}"
    for i in {1..5}; do
        echo -ne "${CYAN}[${i}/5] Establishing secure connection${NC}"
        sleep 0.3
        echo -ne "${CYAN} .${NC}"
        sleep 0.3
        echo -ne "${CYAN} .${NC}"
        sleep 0.3
        echo -ne "${CYAN} .${NC}"
        sleep 0.3
        echo -e "${GREEN} ✓${NC}"
    done
}

# Function to create config.json
create_config() {
    local pool=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    
    cat > config.json << EOF
{
    "pool": "$pool",
    "wallet": "$wallet",
    "worker": "$worker",
    "cpu_usage": "$cpu_usage",
    "algorithm": "verushash",
    "threads": $cpu_usage,
    "tls": false,
    "verbose": true
}
EOF
}

# Function to get CPU usage input
get_cpu_usage() {
    local total_cores=$(nproc)
    while true; do
        echo -e "${YELLOW}"
        echo "Available CPU Cores: $total_cores"
        echo -e "${NC}"
        read -p "Enter CPU usage (number of threads, 1-$total_cores): " cpu_usage
        
        if [[ $cpu_usage =~ ^[0-9]+$ ]] && [ $cpu_usage -ge 1 ] && [ $cpu_usage -le $total_cores ]; then
            break
        else
            echo -e "${RED}Invalid input! Please enter a number between 1 and $total_cores${NC}"
        fi
    done
    echo $cpu_usage
}

# Function to setup Vipor mining
setup_vipor() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║           VIPOR MINING SETUP         ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Vipor pools
    vipor_pools=(
        "sg.vipor.net:5040"
        "eu.vipor.net:5040"
        "us.vipor.net:5040"
        "asia.vipor.net:5040"
        "au.vipor.net:5040"
        "ca.vipor.net:5040"
        "de.vipor.net:5040"
        "fr.vipor.net:5040"
        "jp.vipor.net:5040"
        "kr.vipor.net:5040"
    )
    
    echo -e "${YELLOW}Available Vipor Pools:${NC}"
    for i in "${!vipor_pools[@]}"; do
        echo -e "${GREEN}$((i+1)). ${vipor_pools[i]}${NC}"
    done
    
    local pool_choice
    while true; do
        read -p "Select pool (1-${#vipor_pools[@]}): " pool_choice
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#vipor_pools[@]} ]; then
            break
        else
            echo -e "${RED}Invalid choice! Please select 1-${#vipor_pools[@]}${NC}"
        fi
    done
    
    local selected_pool=${vipor_pools[$((pool_choice-1))]}
    
    echo -e "${YELLOW}"
    read -p "Enter your Wallet Address: " wallet
    read -p "Enter Worker Name: " worker
    echo -e "${NC}"
    
    local cpu_usage=$(get_cpu_usage)
    
    # Create config
    create_config "$selected_pool" "$wallet" "$worker" "$cpu_usage"
    
    echo -e "${GREEN}"
    echo "✓ Vipor Mining Configuration Created!"
    echo "  Pool: $selected_pool"
    echo "  Wallet: $wallet"
    echo "  Worker: $worker"
    echo "  CPU Threads: $cpu_usage"
    echo -e "${NC}"
    
    show_loading "Starting Mining Process"
    
    # Start mining with hellminer
    echo -e "${CYAN}Starting HellMiner for Vipor...${NC}"
    ./hellminer -c $selected_pool -u $wallet.$worker -p x --cpu $cpu_usage
}

# Function to setup Luckpool mining
setup_luckpool() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║          LUCKPOOL MINING SETUP       ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Luckpool pools
    luckpool_pools=(
        "na.luckpool.net:3960"
        "eu.luckpool.net:3960"
        "ap.luckpool.net:3960"
        "sa.luckpool.net:3960"
        "ca.luckpool.net:3960"
        "us.luckpool.net:3960"
        "de.luckpool.net:3960"
        "fr.luckpool.net:3960"
        "jp.luckpool.net:3960"
        "sg.luckpool.net:3960"
    )
    
    echo -e "${YELLOW}Available Luckpool Pools:${NC}"
    for i in "${!luckpool_pools[@]}"; do
        echo -e "${GREEN}$((i+1)). ${luckpool_pools[i]}${NC}"
    done
    
    local pool_choice
    while true; do
        read -p "Select pool (1-${#luckpool_pools[@]}): " pool_choice
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#luckpool_pools[@]} ]; then
            break
        else
            echo -e "${RED}Invalid choice! Please select 1-${#luckpool_pools[@]}${NC}"
        fi
    done
    
    local selected_pool=${luckpool_pools[$((pool_choice-1))]}
    
    echo -e "${YELLOW}"
    read -p "Enter your Wallet Address: " wallet
    read -p "Enter Worker Name: " worker
    echo -e "${NC}"
    
    local cpu_usage=$(get_cpu_usage)
    
    # Create config
    create_config "$selected_pool" "$wallet" "$worker" "$cpu_usage"
    
    echo -e "${GREEN}"
    echo "✓ Luckpool Mining Configuration Created!"
    echo "  Pool: $selected_pool"
    echo "  Wallet: $wallet"
    echo "  Worker: $worker"
    echo "  CPU Threads: $cpu_usage"
    echo -e "${NC}"
    
    show_loading "Starting Mining Process"
    
    # Start mining with hellminer
    echo -e "${CYAN}Starting HellMiner for Luckpool...${NC}"
    ./hellminer -c $selected_pool -u $wallet.$worker -p x --cpu $cpu_usage
}

# Function to show current configuration
show_config() {
    if [ -f "config.json" ]; then
        echo -e "${CYAN}"
        echo "╔══════════════════════════════════════╗"
        echo "║       CURRENT CONFIGURATION          ║"
        echo "╚══════════════════════════════════════╝"
        echo -e "${NC}"
        cat config.json
        echo -e "\n"
    else
        echo -e "${RED}No configuration file found!${NC}"
    fi
}

# Function to show system info
show_system_info() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║           SYSTEM INFORMATION         ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${YELLOW}CPU Information:${NC}"
    echo -e "  Cores: $(nproc)"
    echo -e "  Model: $(grep "model name" /proc/cpuinfo | head -1 | cut -d: -f2 | xargs)"
    
    echo -e "${YELLOW}Memory Information:${NC}"
    echo -e "  Total: $(free -h | grep Mem | awk '{print $2}')"
    echo -e "  Used: $(free -h | grep Mem | awk '{print $3}')"
    echo -e "  Free: $(free -h | grep Mem | awk '{print $4}')"
    
    echo -e "${YELLOW}Uptime:${NC}"
    echo -e "  $(uptime -p)"
}

# Main menu
main_menu() {
    while true; do
        show_banner
        
        echo -e "${WHITE}Select Mining Pool:${NC}"
        echo -e "${GREEN}1. VIPOR Mining${NC}"
        echo -e "${BLUE}2. LUCKPOOL Mining${NC}"
        echo -e "${YELLOW}3. Show Current Configuration${NC}"
        echo -e "${PURPLE}4. System Information${NC}"
        echo -e "${RED}5. Exit${NC}"
        echo ""
        
        read -p "Enter your choice (1-5): " choice
        
        case $choice in
            1)
                hacker_animation
                setup_vipor
                ;;
            2)
                hacker_animation
                setup_luckpool
                ;;
            3)
                show_config
                read -p "Press Enter to continue..."
                ;;
            4)
                show_system_info
                read -p "Press Enter to continue..."
                ;;
            5)
                echo -e "${GREEN}Thank you for using Mining Manager!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice! Please select 1-5${NC}"
                sleep 2
                ;;
        esac
    done
}

# Check if hellminer exists
check_hellminer() {
    if [ ! -f "./hellminer" ]; then
        echo -e "${RED}Error: hellminer not found in current directory!${NC}"
        echo -e "${YELLOW}Please make sure hellminer is in the same directory as this script.${NC}"
        exit 1
    fi
    
    if [ ! -x "./hellminer" ]; then
        chmod +x ./hellminer
        echo -e "${GREEN}✓ hellminer made executable${NC}"
    fi
}

# Main execution
main() {
    # Check dependencies
    if ! command -v nproc &> /dev/null; then
        echo -e "${RED}Error: nproc command not found${NC}"
        exit 1
    fi
    
    # Check hellminer
    check_hellminer
    
    # Start main menu
    main_menu
}

# Run main function
main "$@"
